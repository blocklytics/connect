type Vote @entity {
  id: ID!
  org: LiquidDemocracy!
  department: Department!
  creator: User!
  createdByMember: DepartmentMember!
  metadata: String!
  executed: Boolean!
  startDate: BigInt!
  snapshotBlock: BigInt!
  supportRequiredPct: BigDecimal!
  minAcceptQuorum: BigDecimal!
  yea: BigInt!
  nay: BigInt!
  script: Bytes!
  voteNum: BigInt!
  numCasts: BigInt!
  casts: [Cast]!
  numVoters: BigInt!
  voters: [User]!
  numPotentialVoters: BigInt!
  potentialVoters: [User]!
  votingMembers: [DepartmentMember]!
  potentialVotingMembers: [DepartmentMember]!
  voterParticipationPct: BigDecimal
  sharesUsed: BigInt
  sharesAvailable: BigInt!
  shareUsagePct: BigDecimal
  createdAtBlockNumber: BigInt!
  createdAtTimestamp: BigInt!
  createdAtTransaction: Bytes!
  executedAtBlockNumber: BigInt
  executedAtTimestamp: BigInt
  executedAtTransaction: Bytes
}

type Cast @entity {
  id: ID!
  org: LiquidDemocracy!
  department: Department!
  vote: Vote!
  voteNum: BigInt!
  voter: User!
  member: DepartmentMember!
  supports: Boolean!
  voterStake: BigInt!
  castAtBlockNumber: BigInt!
  castAtTimestamp: BigInt!
  castAtTransaction: Bytes!
}

type LiquidDemocracy @entity {
  id: ID!                              # orgAddress
  name: String!
  departments: [Department]! @derivedFrom(field: "org")
  tokens: [Token]! @derivedFrom(field: "org")
  tokenManagers: [TokenManager]! @derivedFrom(field: "org")
  votes: [Vote]! @derivedFrom(field: "org")
  votesCast: [Cast]! @derivedFrom(field: "org")
  createdAtBlockNumber: BigInt!
  createdAtTimestamp: BigInt!
  createdAtTransaction: Bytes!
}

type Token @entity {
  id: ID! # Address
  name: String!
  decimals: BigInt!
  symbol: String!
  totalSupply: BigInt!
  department: Department!
  org: LiquidDemocracy!
  tokenManager: TokenManager! @derivedFrom(field: "token")
}

type Department @entity {
  id: ID! # App Address
  name: String!
  org: LiquidDemocracy!
  appId: String!
  token: Token!
  supportRequiredPct: BigDecimal!
  minAcceptQuorum: BigDecimal!
  voteDuration: BigInt!
  votes: [Vote]! @derivedFrom(field: "department")
  votesCast: [Cast]! @derivedFrom(field: "department")
  members: [DepartmentMember]!
  isManagement: Boolean!
  tokenManager: TokenManager! @derivedFrom(field: "department")
  createdAtBlockNumber: BigInt!
  createdAtTimestamp: BigInt!
  createdAtTransaction: Bytes!
}

type TokenManager @entity {
  id: ID! # App Address
  appId: String!
  department: Department!
  org: LiquidDemocracy!
  token: Token!
  createdAtBlockNumber: BigInt!
  createdAtTimestamp: BigInt!
  createdAtTransaction: Bytes!
}

type User @entity {
  id: ID! # Ethereum address
  orgs: [LiquidDemocracy]!
  departments: [Department]!
  numVotesParticipated: BigInt!
  numPotentialVotes: BigInt!
  voteParticipationPct: BigDecimal!
  memberships: [DepartmentMember]! @derivedFrom(field: "user")
  votesCreated: [Vote]! @derivedFrom(field: "creator")
  votesCast: [Cast]! @derivedFrom(field: "voter")
  votesParticipated: [Vote]! @derivedFrom(field: "voters")
  currentDelegatedFrom: [DelegationBalance]! @derivedFrom(field: "fromUser")
  currentDelegatedTo: [DelegationBalance]! @derivedFrom(field: "toUser")
  delegatedFromHistory: [DelegationHistory]! @derivedFrom(field: "fromUser")
  delegatedToHistory: [DelegationHistory]! @derivedFrom(field: "toUser")
}

type DepartmentMember @entity {
  id: ID! # appAddress + "-" + Ethereum address
  user: User!
  department: Department!
  currentTokenBalance: BigInt!
  delegableBalance: BigInt!
  votingPower: BigInt!
  votingPowerPercent: BigDecimal!
  numVotesParticipated: BigInt!
  numPotentialVotes: BigInt!
  voteParticipationPct: BigDecimal!
  currentAmountDelegatedFrom: BigInt!
  currentAmountDelegatedTo: BigInt!
  votesCreated: [Vote]! @derivedFrom(field: "createdByMember")
  votesCast: [Cast]! @derivedFrom(field: "member")
  currentDelegatedFrom: [DelegationBalance]! @derivedFrom(field: "fromMember")
  currentDelegatedTo: [DelegationBalance]! @derivedFrom(field: "toMember")
  delegatedFromHistory: [DelegationHistory]! @derivedFrom(field: "fromMember")
  delegatedToHistory: [DelegationHistory]! @derivedFrom(field: "toMember")
}

type DelegationBalance @entity {
  id: ID!                                 # department-from-to
  department: Department!
  fromUser: User!
  toUser: User!
  fromMember: DepartmentMember!
  toMember: DepartmentMember!
  currentBalance: BigInt!
}

type DelegationHistory @entity {
  id: ID!                                 # department-from-to-block-logIndex
  department: Department!
  fromUser: User!
  toUser: User!
  fromMember: DepartmentMember!
  toMember: DepartmentMember!
  amount: BigInt!                         # Negative values = UnDelegation
  newBalance: BigInt!
  blockNumber: BigInt!
  transactionLogIndex: BigInt!
  timestamp: BigInt!
  transaction: Bytes!
}

type AragonInfo @entity {
  id: ID!
  orgs: [Bytes!]!
  apps: [Bytes!]!
  tokens: [Bytes!]!
}
