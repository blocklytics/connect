type Vote @entity {
  id: ID!
  org: LiquidDemocracy!
  department: Department!
  creator: DepartmentMember!
  metadata: String!
  executed: Boolean!
  startDate: BigInt!
  snapshotBlock: BigInt!
  supportRequiredPct: BigInt!
  minAcceptQuorum: BigInt!
  yea: BigInt!
  nay: BigInt!
  votingPower: BigInt!
  script: Bytes!
  voteNum: BigInt!
  casts: [Cast!]! @derivedFrom(field: "vote")
}

type Cast @entity {
  id: ID!
  vote: Vote!
  voteNum: BigInt!
  voter: DepartmentMember!
  supports: Boolean!
  voterStake: BigInt! # TODO - change to VoterPower???
}

type LiquidDemocracy @entity {
  id: ID!                              # orgAddress
  departments: [Department]! @derivedFrom(field: "org")
}

type Token @entity {
  id: ID! # Address
  name: String!
  decimals: BigInt!
  symbol: String!
  totalSupply: BigInt!
  department: Department @derivedFrom(field: "token")
}

type Department @entity {
  id: ID!
  name: String!
  org: LiquidDemocracy!
  appId: Bytes!
  token: Token!
  supportRequiredPct: BigInt!
  minAcceptQuorum: BigInt!
  voteDuration: BigInt!
  votes: [Vote]! @derivedFrom(field: "department")
  members: [DepartmentMember]! @derivedFrom(field: "department")
}

type User @entity {
  id: ID! # Ethereum address
  departments: [DepartmentMember]! @derivedFrom(field: "user")
}

type DepartmentMember @entity {
  id: ID! # appAddress + "-" + Ethereum address
  user: User!
  department: Department!
  votingPower: BigInt!
  votingPowerPercent: BigDecimal!
  currentTokenBalance: BigInt!
  currentAmountDelegatedFrom: BigInt!
  currentAmountDelegatedTo: BigInt!
  votesCast: [Cast]! @derivedFrom(field: "voter")
  currentDelegatedFrom: [DelegationBalance]! @derivedFrom(field: "from")
  currentDelegatedTo: [DelegationBalance]! @derivedFrom(field: "to")
  delegatedFromHistory: [DelegationHistory]! @derivedFrom(field: "from")
  delegatedToHistory: [DelegationHistory]! @derivedFrom(field: "to")
}

type DelegationBalance @entity {
  id: ID!                                 # from-to
  from: DepartmentMember!
  to: DepartmentMember!
  currentBalance: BigInt!
  # history: [DelegationHistory]! @derivedFrom(field: "delegationBalanceId")
}

type DelegationHistory @entity {
  id: ID!                                 # from-to-block-logIndex
  from: DepartmentMember!
  to: DepartmentMember!
  # delegationBalanceId: DelegationBalance!
  amount: BigInt!                         # Negative values = UnDelegation
  newBalance: BigInt!
  delegatedAtBlock: BigInt!
  delegatedAtLogIndex: BigInt!
  delegatedAtTimestamp: BigInt!
  delegatedAtTransaction: Bytes!
}

type AragonInfo @entity {
  id: ID!
  orgs: [Bytes!]!
  apps: [Bytes!]!
  tokens: [Bytes!]!
}
